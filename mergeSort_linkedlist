/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* splitList(ListNode *head)
    {
       ListNode* fast = head;
       ListNode* slow = head;
       ListNode* prev = NULL;
       
       while(fast && fast->next)
       {
         prev = slow;
         slow = slow->next;
         fast = fast->next->next;
       }
       prev->next = NULL;
       return slow;
    }

    ListNode* merge(ListNode *p1, ListNode *p2)
    {
       ListNode *p = new ListNode();
       ListNode *ptr = p; 
 
       if(p1 == NULL)
           return p2;
        
       if(p2 == NULL)
           return p1;
        
       while(p1 && p2)
       {
           if(p1->val < p2->val)
           {
               ptr->next = p1;
               p1 = p1->next;
           }
           else
           {
               ptr->next = p2;
               p2 = p2->next;
           }
           
           ptr = ptr->next;
       }
        
       if(p1 !=NULL)
       {
           ptr->next = p1;
       }
        
       if(p2 !=NULL)
       {
           ptr->next = p2;
       }
    
       return p->next;
    }

    ListNode* sortList(ListNode* head) {
    
        if(head == NULL || head -> next == NULL)
            return head;

        ListNode* mid = splitList(head);
        
        ListNode *l1 = sortList(head);
        ListNode *l2 = sortList(mid);
        
        return merge(l1, l2);
    }
};
